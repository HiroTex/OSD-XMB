<App Name="Playstation" Icon="FOLDER" Category="5" Type="SUBMENU" Description="$`${this.Value.Items.length} ${XMBLANG.TITLES[UserConfig.Language]}`">
  <Options HideEmpty="true">
    <![CDATA[
    	const PopsCFG = CfgMan.Get("pops.cfg");

			function SaveLastPlayed() {
				PopsCFG["last"] = DashUI.SelectedItem.Name;
				CfgMan.Set("pops.cfg", PopsCFG);
			}

			function generateVMC(game) {
				const vmcgrps = CfgMan.Get("PS1VMCGRP.cfg");
				if (game.GameID === "") { return; }
				if (!(game.GameID in vmcgrps)) { return; }
				const basePath = (game.Data.dev === "mass") ? "mass:/POPS/" : `${mountHDDPartition("__common")}:/POPS/`;

				// Make Dirs
				if (!os.readdir(basePath)[0].includes(vmcgrps[game.GameID])) { os.mkdir(`${basePath}${vmcgrps[game.GameID]}`); }
				if (!os.readdir(basePath)[0].includes(game.Name)) 			 { os.mkdir(`${basePath}${game.Name}`); }

				// Write VMC
				if (!os.readdir(`${basePath}${game.Name}/`)[0].includes("VMCDIR.TXT")) {
					ftxtWrite(`${basePath}${game.Name}/VMCDIR.TXT`, vmcgrps[game.GameID]);
				}
			}

      function getGameID(game) {
        if (game.Name in PopsCFG) {
					game.GameID = PopsCFG[game.Name];
				}
        else {
					let path = game.Data.path;
					if (game.Data.dev === "hdd") { path = mountHDDPartition("__.POPS") + ":/"; }
					const gameID = getVCDGameID(`${path}${game.Data.fname}`, game.Data.size);
					game.GameID = gameID.success ? gameID.code : "";
          if (game.GameID !== "") {
          	PopsCFG[game.Name] = game.GameID;
            CfgMan.Push("pops.cfg", PopsCFG);
          }
        }

				game.Description = game.GameID + " \u{B7} " + game.Data.fdev;

				const ico = (game.GameID !== "") ? findICO(game.GameID) : "";
				if (ico !== "") { game.CustomIcon = ico; }
				const bgFile = (game.GameID !== "") ? findBG(game.GameID) : "";
				if (bgFile !== "") { game.CustomBG = bgFile; }

				generateVMC(game);
      }
      
		function getDevName(dev) {
			if (dev == "mass") {
				dev = "USB"
			}
			return dev.toUpperCase()
		}

			function ScanGames(path, dev) {
				const items = [];
				let gameDir = System.listDir(path);
				for (let j = 0; j < gameDir.length; j++) {
          if (gameDir[j].dir || getFileExtension(gameDir[j].name).toLowerCase() !== "vcd") { continue; }
					items.push({
						Name: getGameName(gameDir[j].name),
						Type: "ELF",
						Data: { path: path, fname: gameDir[j].name, size: gameDir[j].size, fsize: formatFileSize(gameDir[j].size), dev: dev, fdev: getDevName(dev)}
					});

					Object.defineProperty(items[items.length - 1], "Icon", {
						get() {
              getGameID(this);
              delete this.Icon;
              this.Icon = "DISC_PS1";
              return this.Icon;
            },
						enumerable: true,
            configurable: true
					});

					Object.defineProperty(items[items.length - 1], "Value", {
						get() {	return { Path: getPOPSElfPath(this.Data), Args: [], Code: SaveLastPlayed }; },
						enumerable: true
					});
				}
				return items;
			}

			const devices = System.devices();
			let gameList = [];

			if (devices.some(dev => dev.name === "mass")) {
				const massDir = os.readdir("mass:/")[0];
				if (massDir && massDir.includes("POPS")) {
					const dirFiles = os.readdir("mass:/POPS/")[0];

					// Check if files are present
					if (dirFiles.includes("POPS_IOX.PAK") && dirFiles.includes("POPSTARTER.ELF")) {
						gameList = gameList.concat(ScanGames("mass:/POPS/", "mass"));
					}
					else {
						dirApp = os.readdir(`${CWD}/APPS/POPS/`)[0];
						if (dirApp.includes("POPSTARTER.ELF") && dirApp.includes("POPS_IOX.PAK")){
							System.copyFile(`${CWD}/APPS/POPS/POPSTARTER.ELF`, "mass:/POPS/POPSTARTER.ELF");
							System.copyFile(`${CWD}/APPS/POPS/POPS_IOX.PAK`, "mass:/POPS/POPS_IOX.PAK");
							gameList = gameList.concat(ScanGames("mass:/POPS/", "mass"));
						}
					}
				}
			}

			if (devices.some(dev => dev.name === "hdd")) {
				const hddDir = os.readdir("hdd0:")[0];
				if (hddDir && hddDir.includes("__common") && hddDir.includes("__.POPS")) {
					const commpart = mountHDDPartition("__common");
					const dirFiles = os.readdir(`${commpart}:/POPS/`)[0];
					const filesPresent = (dirFiles.includes("POPS.ELF") && dirFiles.includes("IOPRP252.IMG") && dirFiles.includes("POPSTARTER.ELF"));
					if (filesPresent) {
						gameList = gameList.concat(ScanGames(`${mountHDDPartition("__.POPS")}:/`, "hdd"));
					}
					else {
						dirApp = os.readdir(`${CWD}/APPS/POPS/`)[0];
						if (dirApp.includes("POPS.ELF") && dirApp.includes("IOPRP252.IMG") && dirApp.includes("POPSTARTER.ELF")) {
							System.copyFile(`${CWD}/APPS/POPS/POPSTARTER.ELF`, `${commpart}:/POPS/POPSTARTER.ELF`);
							System.copyFile(`${CWD}/APPS/POPS/POPS.ELF`, `${commpart}:/POPS/POPS.ELF`);
							System.copyFile(`${CWD}/APPS/POPS/IOPRP252.IMG`, `${commpart}:/POPS/IOPRP252.IMG`);
							gameList = gameList.concat(ScanGames(`${mountHDDPartition("__.POPS")}:/`, "hdd"));
						}
					}
				}
			}

			if (gameList.length > 1) { gameList.sort((a, b) => a.Name.localeCompare(b.Name)); }

			return gameList;
    ]]>
  </Options>
  <Default>
    <![CDATA[
			let val = 0;
			const cfg = CfgMan.Get("pops.cfg");
			if ('last' in cfg) {
				const index = this.Items.findIndex(item => item.Name === cfg["last"]);
				val = (index > -1) ? index : 0;
			}
			return val;
		]]>
  </Default>
  <Context Name="OptionContext" Filter="Custom" Condition="item.GameID">
    <Component Name="{INFO}" Icon="-1">
      <Confirm>
        <![CDATA[
        function(index, item) {
					DashUISetDialog(item.Dialog);
				}
      ]]>
      </Confirm>
      <Dialog Icon="-1" Title="" BG="false" Type="INFO" BackBtn="true" >
        <Info>
          <Item Name="{TITLE}" Value="{DashUI.SubMenu.ItemCollection[DashUI.SubMenu.Level].Items[DashUI.SubMenu.Items.Current].Name}" Selectable="false" />
          <Item Name="{DEVICE}" Value="{DashUI.SubMenu.ItemCollection[DashUI.SubMenu.Level].Items[DashUI.SubMenu.Items.Current].Data.fdev}" Selectable="false" />
          <Item Name="{SIZE}" Value="{DashUI.SubMenu.ItemCollection[DashUI.SubMenu.Level].Items[DashUI.SubMenu.Items.Current].Data.fsize}" Selectable="false" />
        </Info>
      </Dialog>
    </Component>
		<Component Name="{CATEGORY.SETTINGS}" Icon="-1">
      <Confirm>
        <![CDATA[
        function(index, item) {
					const items = item.Dialog.Info;
          const game = DashUI.SubMenu.ItemCollection[DashUI.SubMenu.Level].Items[DashUI.SubMenu.Items.Current]
					const title = game.Name;
					let dev = game.Data.dev;

					const cheats = [
						"COMPATIBILITY_0x01",
						"COMPATIBILITY_0x02",
						"COMPATIBILITY_0x03",
						"COMPATIBILITY_0x04",
						"COMPATIBILITY_0x05",
						"COMPATIBILITY_0x06",
						"COMPATIBILITY_0x07",
						"CODECACHE_ADDON_0",
						"SUBCDSTATUS",
						"FAKELC",
						"NOPAL",
						"FORCEPAL",
						"MUTE_CDDA",
						"UNDO_MUTE_CDDA",
						"MUTE_VAB",
						"D2LS",
						"D2LS_ALT",
						"NOVMC0",
						"NOVMC1",
					];

					let statuses = getPOPSCheat({ cheats: cheats, game: title, device: dev });

					const settings = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
					settings[0] = (statuses[0]) ? 1 : 0;
					settings[0] = (statuses[1]) ? 2 : settings[0];
					settings[0] = (statuses[2]) ? 3 : settings[0];
					settings[0] = (statuses[3]) ? 4 : settings[0];
					settings[0] = (statuses[4]) ? 5 : settings[0];
					settings[0] = (statuses[5]) ? 6 : settings[0];
					settings[0] = (statuses[6]) ? 7 : settings[0];
					settings[1] = (statuses[7]) ? 1 : 0;
					settings[2] = (statuses[8]) ? 1 : 0;
					settings[3] = (statuses[9]) ? 1 : 0;
					settings[4] = (statuses[10]) ? 1 : 0;
					settings[4] = (statuses[11]) ? 2 : settings[4];
					settings[5] = (statuses[12]) ? 1 : 0;
					settings[5] = (statuses[13]) ? 2 : settings[5];
					settings[5] = (statuses[14]) ? 3 : settings[5];
					settings[6] = (statuses[15]) ? 1 : 0;
					settings[6] = (statuses[16]) ? 2 : settings[6];
					settings[7] = (statuses[17]) ? 1 : 0;
					settings[7] = (statuses[18]) ? 2 : settings[7];

					for (let i = 0; i < items.length; i++) {
						items[i].Selected = settings[i];
					}

					DashUISetDialog(item.Dialog);
				}
      ]]>
      </Confirm>
			<Dialog Icon="-1" Title="" BG="false" Type="INFO" BackBtn="true" ConfirmBtn="true" >
				<Info>
					<Item Name="{POPS_OPTIONS.0}" Selectable="true">
						<Value>
							<Option value="{NO}" />
							<Option value="1" />
							<Option value="2" />
							<Option value="3" />
							<Option value="4" />
							<Option value="5" />
							<Option value="6" />
							<Option value="7" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.1}" Selectable="true">
						<Value>
							<Option value="{NO}" />
							<Option value="{YES}" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.2}" Selectable="true">
						<Value>
							<Option value="{NO}" />
							<Option value="{YES}" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.3}" Selectable="true">
						<Value>
							<Option value="{NO}" />
							<Option value="{YES}" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.4}" Selectable="true">
						<Value>
							<Option value="{DEFAULT}" />
							<Option value="{DISABLED}" />
							<Option value="{POPS_SETTINGS.PALPATCHER_2}" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.5}" Selectable="true">
						<Value>
							<Option value="{DEFAULT}" />
							<Option value="{POPS_SETTINGS.SOUND_1}" />
							<Option value="{POPS_SETTINGS.SOUND_2}" />
							<Option value="{POPS_SETTINGS.SOUND_3}" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.6}" Selectable="true">
						<Value>
							<Option value="{DEFAULT}" />
							<Option value="{POPS_SETTINGS.DPAD2STICK_1}" />
							<Option value="{POPS_SETTINGS.DPAD2STICK_2}" />
						</Value>
					</Item>
					<Item Name="{POPS_OPTIONS.7}" Selectable="true">
						<Value>
							<Option value="{DEFAULT}" />
							<Option value="{POPS_SETTINGS.NOVMC_1}" />
							<Option value="{POPS_SETTINGS.NOVMC_2}" />
						</Value>
					</Item>
				</Info>
				<Dialog Name="SaveSettingsDialog" Icon="-1" Title="" BG="false" Type="TEXT" Text="{WAIT}" Align="HCENTER">
					<Task>
						<![CDATA[
							function() {
								const info = DashUI.Dialog.Data[DashUI.Dialog.Level - 1].Info;
								const cheats = [];
								cheats.push({ code: "COMPATIBILITY_0x01", enabled: (info[0].Selected === 1)});
								cheats.push({ code: "COMPATIBILITY_0x02", enabled: (info[0].Selected === 2)});
								cheats.push({ code: "COMPATIBILITY_0x03", enabled: (info[0].Selected === 3)});
								cheats.push({ code: "COMPATIBILITY_0x04", enabled: (info[0].Selected === 4)});
								cheats.push({ code: "COMPATIBILITY_0x05", enabled: (info[0].Selected === 5)});
								cheats.push({ code: "COMPATIBILITY_0x06", enabled: (info[0].Selected === 6)});
								cheats.push({ code: "COMPATIBILITY_0x07", enabled: (info[0].Selected === 7)});
								cheats.push({ code: "CODECACHE_ADDON_0",  enabled: (info[1].Selected === 1)});
								cheats.push({ code: "SUBCDSTATUS", 				enabled: (info[2].Selected === 1)});
								cheats.push({ code: "FAKELC", 						enabled: (info[3].Selected === 1)});
								cheats.push({ code: "NOPAL", 						enabled: (info[4].Selected === 1)});
								cheats.push({ code: "FORCEPAL", 					enabled: (info[4].Selected === 2)});
								cheats.push({ code: "MUTE_CDDA",					enabled: (info[5].Selected === 1)});
								cheats.push({ code: "UNDO_MUTE_CDDA", 	  enabled: (info[5].Selected === 2)});
								cheats.push({ code: "MUTE_VAB", 					enabled: (info[5].Selected === 3)});
								cheats.push({ code: "D2LS", 							enabled: (info[6].Selected === 1)});
								cheats.push({ code: "D2LS_ALT", 					enabled: (info[6].Selected === 2)});
								cheats.push({ code: "NOVMC0", 						enabled: (info[7].Selected === 1)});
								cheats.push({ code: "NOVMC1", 						enabled: (info[7].Selected === 2)});

								const item = DashUI.SubMenu.ItemCollection[DashUI.SubMenu.Level].Items[DashUI.SubMenu.Items.Current];

								setPOPSCheat({ cheats: cheats, game: item.Name, device: item.Data.dev });
							}
						]]>
					</Task>
				</Dialog>
				<Event On="Confirm" Type="Transition" To="SaveSettingsDialog"/>
			</Dialog>
		</Component>
  </Context>
</App>
