<App Icon="SET_THEME" Category="1" Type="SUBMENU">
  <Name>
    <String str="Theme Settings" />
    <String str="Paramètres de thème" />
    <String str="Ajustes de Tema" />
    <String str="Design-Einstellungen" />
    <String str="Impostazioni del tema" />
    <String str="Thema-instellingen" />
    <String str="Configurações de tema" />
  </Name>
  <Description>
    <String str="Adjust settings related to appearance." />
    <String str="Réglez les paramètres liés à l'apparence." />
    <String str="Ajusta la apariencia de la pantalla XMB." />
    <String str="Einstellungen für das Erscheinungsbild des XMB-Bildschirms anpassen." />
    <String str="Regola le impostazioni relative all'aspetto." />
    <String str="Pas instellingen aan die verband houden met het uiterlijk van het XMB-scherm." />
    <String str="Ajuste as configurações relacionadas à aparência." />
  </Description>
  <Option Type="CONTEXT" Icon="SET_CFG">
    <Name>
      <String str="Theme" />
      <String str="Thème" />
      <String str="Tema" />
      <String str="Thema" />
      <String str="Tema" />
      <String str="Thema" />
      <String str="Tema" />
    </Name>
    <Description>
      <String str="Sets the interface style." />
      <String str="Définir le style de l'interface." />
      <String str="Establecer el estilo de la interfaz." />
      <String str="Den Schnittstellenstil festlegen." />
      <String str="Seleziona lo stile dell'interfaccia." />
      <String str="Stel de interface-stijl in." />
      <String str="Definir o estilo da interface." />
    </Description>
	  <Default>
      <![CDATA[
		    const Items = [];
		    Items.push("Original");

		    const sortedDirectories = System.listDir(PATHS.Theme)
			    .filter((item) => item.name !== "." && item.name !== ".." && item.name !== "Original" && item.dir) // Exclude "." and ".." and keep only directories
			    .sort((a, b) => a.name.localeCompare(b.name));

		    for (let i = 0; i < sortedDirectories.length; i++) { Items.push(sortedDirectories[i].name); }
		    let index = Items.indexOf(UserConfig.Theme);
		    return (index > -1) ? index : 0;
      ]]>
	  </Default>
	  <Components>
      <![CDATA[
        const Items = [];
		    Items.push({Name: "Original"});

		    const sortedDirectories = System.listDir(PATHS.Theme)
			    .filter((item) => item.name !== "." && item.name !== ".." && item.name !== "Original" && item.dir) // Exclude "." and ".." and keep only directories
			    .sort((a, b) => a.name.localeCompare(b.name));

		    for (let i = 0; i < sortedDirectories.length; i++) {
			    const item = sortedDirectories[i];
			    const dirFiles = os.readdir(`${PATHS.Theme}${item.name}/`)[0];
			    const ico = (dirFiles.includes("thmico.png")) ? `${PATHS.Theme}${item.name}/thmico.png` : -1;
			    Items.push({ Name: item.name, Icon: ico });
			    if (dirFiles.includes("thmprw.png")) { Items[Items.length - 1].PreviewImage = `${PATHS.Theme}${item.name}/thmprw.png`; }
		    }

		    return Items;
      ]]>
	  </Components>
    <Confirm>
      <![CDATA[
        function(index, item) {
          if (item.Name === UserConfig.Theme) { return; }

		      UserConfig.Theme = item.Name;
		      let config = CfgMan.Get("main.cfg");
		      config["Theme"] = UserConfig.Theme;
		      CfgMan.Push("main.cfg", config);

		      const _bg = function() {
			      DisableCustomBgImg();
			      UserConfig.BgColor = 0;
			      BgElements.BgColor.Next = UserConfig.BgColor;
			      BgElements.BgColor.Progress = 0.0f;
			      DashElements.ItemFocus = false;

			      for (let i = 0; i < DashIcons.length; i++) {
				      const path = `${PATHS.Theme}${UserConfig.Theme}/icons/${DashIconsInfo[i].path}`;
				      const icn = std.exists(path) ? new Image(path) : new Image(`${PATHS.Theme}Original/icons/${DashIconsInfo[i].path}`);
				      icn.optimize();
				      icn.filter = LINEAR;
				      DashIcons[i] = icn;
			      }

			      let thmival = os.setInterval(() => {
				      FontInit();
				      DashUICustomizationInit();
              const thm = `${PATHS.Theme}${UserConfig.Theme}/thm.js`;
				      if (std.exists(thm)) { std.loadScript(thm); }
				      os.clearInterval(thmival);
			      }, 0);

			      UIAnimationDialogFade_Start(false);
		      }

		      const dialog = {
			      Icon: 9,
			      Title: DashUI.SubMenu.ItemCollection[DashUI.SubMenu.Level].Items[DashUI.SubMenu.Items.Current].Name,
			      BG: false,
			      Type: "TEXT",
			      Text: XMBLANG.WAIT,
			      Fun: _bg,
		      };

		      DashUISetDialog(dialog);
        }
      ]]>
    </Confirm>
  </Option>
  <Option Type="CONTEXT" Icon="SET_CFG">
    <Name>
      <String str="Color" />
      <String str="Couleur" />
      <String str="Color" />
      <String str="Farbe" />
      <String str="Colore" />
      <String str="Kleur" />
      <String str="Cor" />
    </Name>
    <Description>
      <String str="Sets the background color." />
      <String str="Définir la couleur de fond." />
      <String str="Establecer el color de fondo." />
      <String str="Hintergrundfarbe festlegen." />
      <String str="Seleziona il colore dello sfondo." />
      <String str="Stel de achtergrondkleur in." />
      <String str="Definir a cor de fundo." />
    </Description>
    <Component Icon="-1">
      <Name>
        <String str="Original" />
        <String str="Original" />
        <String str="Original" />
        <String str="Original" />
        <String str="Originale" />
        <String str="Origineel" />
        <String str="Original" />
      </Name>
    </Component>
    <Component Icon="./XMB/color/ico1.png" />
    <Component Icon="./XMB/color/ico2.png" />
    <Component Icon="./XMB/color/ico3.png" />
    <Component Icon="./XMB/color/ico4.png" />
    <Component Icon="./XMB/color/ico5.png" />
    <Component Icon="./XMB/color/ico6.png" />
    <Component Icon="./XMB/color/ico7.png" />
    <Component Icon="./XMB/color/ico8.png" />
    <Component Icon="./XMB/color/ico9.png" />
    <Component Icon="./XMB/color/ico10.png" />
    <Component Icon="./XMB/color/ico11.png" />
    <Component Icon="./XMB/color/ico12.png" />
    <Component Icon="./XMB/color/ico13.png" />
    <Default Variable="UserConfig.BgColor" />
    <Preview>
      <![CDATA[
        function(index, item) {
			    const ival = os.setInterval(() => {
				    if (DashUI.State.Current !== 3) { os.clearInterval(ival); }
				    else if (BgElements.BgColor.Next === BgElements.BgColor.Current) {
					    BgElements.BgColor.Next = index;
					    BgElements.BgColor.Progress = 0.0f;
					    os.clearInterval(ival);
				    }
			    }, 0);
        }
      ]]>
    </Preview>
    <Confirm>
      <![CDATA[
        function(index, item) {
			    if ((BgElements.BgColor.Next === BgElements.BgColor.Current) && (BgElements.BgColor.Next !== index)) {
				    BgElements.BgColor.Current = BgElements.BgColor.Next;
				    BgElements.BgColor.Next = index;
				    BgElements.BgColor.Progress = 0.0f;
			    }
			    BgElements.BgColor.Previous = index;
			    UserConfig.BgColor = index;
          let config = CfgMan.Get("main.cfg");
          config["BgColor"] = index.toString();
          CfgMan.Push("main.cfg", config);
        }
      ]]>
    </Confirm>
    <Cancel>
      <![CDATA[
        function(index, item) {
			    if (BgElements.BgColor.Next !== BgElements.BgColor.Previous) {
				    BgElements.BgColor.Current = BgElements.BgColor.Next;
				    BgElements.BgColor.Next = BgElements.BgColor.Previous;
				    BgElements.BgColor.Progress = 0.0f;
			    }
        }
      ]]>
    </Cancel>
  </Option>
  <Option Type="CONTEXT" Icon="SET_CFG">
    <Name>
      <String str="Background" />
      <String str="Arrière-plan" />
      <String str="Fondo" />
      <String str="Hintergrundbild" />
      <String str="Sfondo" />
      <String str="Achtergrond" />
      <String str="Fundo" />
    </Name>
    <Description>
      <String str="Set the interface background." />
      <String str="Définir l'arrière-plan de l'interface." />
      <String str="Establecer el fondo de la interfaz." />
      <String str="Den Hintergrund der Schnittstelle festlegen." />
      <String str="Seleziona lo sfondo dell'interfaccia." />
      <String str="Stel de achtergrond van de interface in." />
      <String str="Definir o fundo da interface." />
    </Description>
    <Component Icon="-1">
      <Name>
        <String str="Original" />
        <String str="Original" />
        <String str="Original" />
        <String str="Original" />
        <String str="Originale" />
        <String str="Origineel" />
        <String str="Original" />
      </Name>
    </Component>
    <Component Name="{WALLPAPER}" Icon="-1"/>
    <Default Variable="UserConfig.DisplayBg" />
    <Dialog Icon="9" Title="{WALLPAPER}" BG="true" Type="TEXT" Text="{NOWPP_MSG}" BackBtn="true"/>
    <Confirm>
      <![CDATA[
        function(index, item) {
          UserConfig.DisplayBg = false;
          if ((index == 1) && (!UserConfig.CustomBgImg)) {
              DashUISetDialog(DashUI.Context.ItemCollection[DashUI.Context.Level].Dialog);
              return false;
          }
          else if ((index == 1) && (UserConfig.CustomBgImg)) { SetNewCustomBgImg(UserConfig.CustomBgImg); }
          let config = CfgMan.Get("main.cfg");
          config["displayBg"] = UserConfig.DisplayBg.toString();
          CfgMan.Push("main.cfg", config);
        }
      ]]>
    </Confirm>
  </Option>
  <Option Type="CONTEXT" Icon="SET_CFG">
    <Name>
      <String str="Waves" />
      <String str="Waves" />
      <String str="Ondas" />
      <String str="Waves" />
      <String str="Waves" />
      <String str="Waves" />
      <String str="Waves" />
    </Name>
    <Description>
      <String str="Set the Background Waves On or Off." />
      <String str="Set the Background Waves On or Off." />
      <String str="Habilita o Deshabilita las ondas de fondo." />
      <String str="Set the Background Waves On or Off." />
      <String str="Set the Background Waves On or Off." />
      <String str="Set the Background Waves On or Off." />
      <String str="Set the Background Waves On or Off." />
    </Description>
    <Component Name="{NO}" Icon="-1" />
    <Component Name="{YES}" Icon="-1" />
    <Default Variable="UserConfig.Waves" />
    <Confirm>
      <![CDATA[
        function(index, item) {
          UserConfig.Waves = (index == 1);
          let config = CfgMan.Get("main.cfg");
          config["waves"] = UserConfig.Waves.toString();
          CfgMan.Push("main.cfg", config);
        }
      ]]>
    </Confirm>
  </Option>
</App>
